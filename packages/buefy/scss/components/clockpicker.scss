@use "sass:list";
@use "../../../bulma/sass/utilities" as bulma-utilities;
@use "../../../bulma/sass/form/shared" as bulma-form;

$clockpicker-card-radius: var(--card-radius);
$clockpicker-colors: bulma-form.$form-colors !default;

// Map Local variables
$-css-vars-map: (
    "clockpicker-card-radius": $clockpicker-card-radius
);

// Register & Export CSS Variabless
@include bulma-utilities.exportCSSVars($-css-vars-map);
@include bulma-utilities.registerComponentCSSVars("b-clockpicker", $-css-vars-map);

.b-clockpicker {
    // Clockpicker variables defined here as exact numbers
    // must be known for use in the Vue component for calculations
    // to determine  number and hand positioning/size.
    $transition-swing: cubic-bezier(.25, .8, .50, 1);
    $time-font-size: 60px;
    $period-font-size: 1rem;
    $number-font-size: 18px;
    $indicator-size: 40px;
    $hand-endpoint-size: 12px;
    $padding-outer: 12px;
    $padding-inner: 5px;

    .card-header {
        color: var(--primary-invert);
        background-color: var(--primary);
    }

    .b-clockpicker-face {
        &::after {
            background-color: var(--primary);
        }

        &-hand {
            background-color: var(--primary);
            border-color: var(--primary);
        }

        &-number.active {
            color: var(--primary-invert);
            background-color: var(--primary);
        }
    }

    // supporting all $form-colors defined in Bulma/custom
    @each $name, $pair in $clockpicker-colors {
        $color: list.nth($pair, 1);
        $color-invert: list.nth($pair, 2);
        &.is-#{$name} {
            .card-header {
                // color: $inverse;
                color: var(--#{$name}-invert);
                background-color: var(--#{$name});
            }

            .b-clockpicker-face {
                &::after {
                    background-color: var(--#{$name});
                }

                &-hand {
                    background-color: var(--#{$name});
                    border-color: var(--#{$name});
                }

                &-number.active {
                    color: var(--#{$name}-invert);
                    background-color: var(--#{$name});
                }
            }
        }
    }

    .dropdown-menu {
        min-width: 0;
    }

    .dropdown,
    .dropdown-trigger {
        width: 100%;

        .input[readonly] {
            cursor: pointer;
            box-shadow: var(--input-shadow);

            &:focus,
            &.is-focused,
            &:active,
            &.is-active {
                // box-shadow: $input-focus-box-shadow-size $input-focus-box-shadow-color;
                box-shadow: var(--input-focus-box-shadow-size) var(--input-focus-box-shadow-color);
            }
        }
    }

    .dropdown-item {
        padding: 0;
        font-size: inherit;
    }

    .dropdown-content {
        padding-top: 0;
        padding-bottom: 0;
    }

    .card {
        border-radius: var(--clockpicker-card-radius);
    }

    .card-header {
        border-top-left-radius: var(--clockpicker-card-radius);
        border-top-right-radius: var(--clockpicker-card-radius);
    }

    .card-content {
        padding: $padding-outer;
    }

    &-btn {
        cursor: pointer;
        opacity: 0.6;

        &:hover,
        &.active {
            opacity: 1;
        }
    }

    &-period {
        .b-clockpicker-btn {
            font-size: $period-font-size;
        }
    }

    &-time {
        span {
            display: inline-flex;
            align-items: center;
            justify-content: center;
        }
    }

    &-header {
        display: flex;
        justify-content: flex-end;
        line-height: 1;
        color: inherit;

        // time display in the title for inline display
        .b-clockpicker-time {
            white-space: nowrap;

            span {
                height: $time-font-size;
                font-size: $time-font-size;
            }
        }

        // am/pm in the title for inline display
        .b-clockpicker-period {
            display: flex;
            flex-direction: column;
            align-self: flex-end;
            margin: 8px 0 6px 8px;
        }
    }

    &-body {
        transition: 0.9s $transition-swing;

        .b-clockpicker-btn {
            padding: 0 8px;
            margin-bottom: 2px;
            border-radius: var(--radius-rounded);

            &:hover,
            &.active {
                color: white;
                background-color: var(--primary);
            }
        }

        .b-clockpicker-period {
            position: absolute;
            top: 5px;
            right: 5px;
        }

        .b-clockpicker-time {
            position: absolute;
            top: 5px;
            left: 5px;
            font-size: $period-font-size;

        }

        .b-clockpicker-face {
            position: relative;
            display: flex;
            align-items: center;
            justify-content: center;
            width: 100%;
            height: 100%;
            background-color: var(--grey-lighter);

            // Outer border circle of clock
            border-radius: 50%;

            &::after {
                position: absolute;
                top: 50%;
                left: 50%;
                z-index: 10;
                width: $hand-endpoint-size;
                height: $hand-endpoint-size;
                content: "";

                // Dot in center
                border-radius: 50%;
                transform: translate(-50%, -50%);
            }

            &-outer-ring {
                @extend %unselectable;

                position: relative;
                width: calc(100% - #{$indicator-size + ($padding-inner * 2)});
                height: calc(100% - #{$indicator-size + ($padding-inner * 2)});
                border-radius: 50%;
            }

            // Clock face number indicators
            &-number {
                position: absolute;
                top: calc(50% - #{$indicator-size} * 0.5);
                left: calc(50% - #{$indicator-size} * 0.5);
                display: flex;
                align-items: center;
                justify-content: center;
                width: $indicator-size;
                height: $indicator-size;
                font-size: $number-font-size;
                text-align: center;
                cursor: default;
                border-radius: 100%;

                @extend %unselectable;

                > span {
                    z-index: 1;
                }

                &::before,
                &::after {
                    position: absolute;
                    top: 50%;
                    left: 50%;
                    width: $indicator-size;
                    height: $indicator-size;
                    content: "";
                    border-radius: 100%;
                    transform: translate(-50%, -50%);
                }

                &.active {
                    z-index: 2;
                    cursor: default;
                }

                &.disabled {
                    pointer-events: none;
                    opacity: .25;
                }
            }

            &-hand {
                position: absolute;
                bottom: 50%;
                left: calc(50% - 1px);
                z-index: 1;
                width: 2px;
                height: calc(50% - #{$hand-endpoint-size * 0.5});
                transition: .3s $transition-swing;
                transform-origin: center bottom;
                will-change: transform;

                &::before {
                    position: absolute;
                    top: -($hand-endpoint-size) * 0.5;
                    left: 50%;
                    width: $hand-endpoint-size;
                    height: $hand-endpoint-size;
                    content: "";
                    background: transparent;
                    border-color: inherit;
                    border-style: solid;
                    border-width: 2px;
                    border-radius: 100%;
                    transform: translate(-50%, -50%);
                }
            }
        }
    }

    &-footer {
        display: block;
        padding: $padding-outer;
    }

    // Sizes
    @include bulma-utilities.control-sizes;
}
